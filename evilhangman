#include <iostream>
#include <fstream>
#include <string>
#include <set>
#include <stack>
#include <iterator>
using namespace std;

const string ALPHABET  = "abcdefghijklmnopqrstuvwxyz";
/*
 * TO DO LIST:
 * - partition properly so that dictionary lessens with each guess
 * - partition correctly even with several instances of the guess
 * - display partial_word
 * - count down guesses
 * - game over function with no guesses left/full word found
 * - bool function for printing remaining possibilities or not
 */



//initializes the displayed word
string partial_word_init(string partial_word, int word_length) {
    for (signed int i = 0; i < word_length; i++) {
        partial_word += "_";
    }
    return partial_word;
}

//updates the displayed word
string partial_word(string partial_word, int index, char letter) {
    partial_word[index] = letter;
    return partial_word;
}


//asks and recieves a guess from the user
string guess(string made_guesses, char letter) {
    if (made_guesses.find(letter) != std::string::npos) {
        cout << "You already guessed that!" << endl;
    }
    return made_guesses += letter;
}

//divides the available words into partitions
set<string> partition(set<string> current, set<string> dictionary, char letter, int index) {
    for (string str:dictionary) {
        if (!str.find(letter, index)) {
            current.insert(str);
        }
    }
    return current;
}


bool game_over() {
    return false;
}


char guess_letter() {
    char letter;
    cout << "Guess a letter: " << endl;
    cin >> letter;
    return letter;
}



//the game
void hangman() {
    unsigned int word_length;
    cout << "Enter word length: ";
    cin >> word_length;

    unsigned int guesses;
    cout << "Enter number of guesses: ";
    cin >> guesses;

    ifstream input;

    string filename = "dictionary.txt";

    input.open(filename);

    set<string> dictionary;

    string word;
    while (getline(input, word)) {
        if (word.length() == word_length) {
            dictionary.insert(word);
        }
    }

    string made_guesses;

    set<string> former;
    former.clear();
    set<string> current;
    current.clear();


    //game loop
    while (!game_over()) {
        char letter = guess_letter();
        made_guesses = guess(made_guesses, letter);
        for(unsigned int i = 0; i < word_length; i++){
            current = partition(current, dictionary, letter, i);
            if (current.size() > former.size()) {
                former = current;
            }
            current.clear();
        }
        dictionary = former;
        for (string str : dictionary) {
            cout << str << endl;
        }
    }
}

//main function
int main() {
    cout << "Welcome to Hangman." << endl;

    hangman();

    return 0;
}
